// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: protos/bcaster.proto

package bcaster

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BCasterClient is the client API for BCaster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BCasterClient interface {
	SendShortMsg(ctx context.Context, in *ShortMsg, opts ...grpc.CallOption) (*DeliveryStatus, error)
	RecvShortMsg(ctx context.Context, in *DeliveryRequest, opts ...grpc.CallOption) (*ShortMsg, error)
	RegisterClient(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationAccept, error)
}

type bCasterClient struct {
	cc grpc.ClientConnInterface
}

func NewBCasterClient(cc grpc.ClientConnInterface) BCasterClient {
	return &bCasterClient{cc}
}

func (c *bCasterClient) SendShortMsg(ctx context.Context, in *ShortMsg, opts ...grpc.CallOption) (*DeliveryStatus, error) {
	out := new(DeliveryStatus)
	err := c.cc.Invoke(ctx, "/bcaster.BCaster/SendShortMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bCasterClient) RecvShortMsg(ctx context.Context, in *DeliveryRequest, opts ...grpc.CallOption) (*ShortMsg, error) {
	out := new(ShortMsg)
	err := c.cc.Invoke(ctx, "/bcaster.BCaster/RecvShortMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bCasterClient) RegisterClient(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationAccept, error) {
	out := new(RegistrationAccept)
	err := c.cc.Invoke(ctx, "/bcaster.BCaster/RegisterClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BCasterServer is the server API for BCaster service.
// All implementations must embed UnimplementedBCasterServer
// for forward compatibility
type BCasterServer interface {
	SendShortMsg(context.Context, *ShortMsg) (*DeliveryStatus, error)
	RecvShortMsg(context.Context, *DeliveryRequest) (*ShortMsg, error)
	RegisterClient(context.Context, *RegistrationRequest) (*RegistrationAccept, error)
	mustEmbedUnimplementedBCasterServer()
}

// UnimplementedBCasterServer must be embedded to have forward compatible implementations.
type UnimplementedBCasterServer struct {
}

func (UnimplementedBCasterServer) SendShortMsg(context.Context, *ShortMsg) (*DeliveryStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendShortMsg not implemented")
}
func (UnimplementedBCasterServer) RecvShortMsg(context.Context, *DeliveryRequest) (*ShortMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecvShortMsg not implemented")
}
func (UnimplementedBCasterServer) RegisterClient(context.Context, *RegistrationRequest) (*RegistrationAccept, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterClient not implemented")
}
func (UnimplementedBCasterServer) mustEmbedUnimplementedBCasterServer() {}

// UnsafeBCasterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BCasterServer will
// result in compilation errors.
type UnsafeBCasterServer interface {
	mustEmbedUnimplementedBCasterServer()
}

func RegisterBCasterServer(s grpc.ServiceRegistrar, srv BCasterServer) {
	s.RegisterService(&BCaster_ServiceDesc, srv)
}

func _BCaster_SendShortMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BCasterServer).SendShortMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bcaster.BCaster/SendShortMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BCasterServer).SendShortMsg(ctx, req.(*ShortMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _BCaster_RecvShortMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BCasterServer).RecvShortMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bcaster.BCaster/RecvShortMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BCasterServer).RecvShortMsg(ctx, req.(*DeliveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BCaster_RegisterClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BCasterServer).RegisterClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bcaster.BCaster/RegisterClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BCasterServer).RegisterClient(ctx, req.(*RegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BCaster_ServiceDesc is the grpc.ServiceDesc for BCaster service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BCaster_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bcaster.BCaster",
	HandlerType: (*BCasterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendShortMsg",
			Handler:    _BCaster_SendShortMsg_Handler,
		},
		{
			MethodName: "RecvShortMsg",
			Handler:    _BCaster_RecvShortMsg_Handler,
		},
		{
			MethodName: "RegisterClient",
			Handler:    _BCaster_RegisterClient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/bcaster.proto",
}
